from pydantic import BaseModel, Field
from typing import Optional
from fastapi import UploadFile

class QueryRequest(BaseModel):
    query: str = Field(
        ...,
        min_length=10,
        max_length=2000,
        description="The user query to be processed by an LLM."
    )

class FileQueryRequest(BaseModel):
    query: Optional[str] = Field(
        None,
        max_length=2000,
        description="Optional user query to be processed along with the file. If not provided, insights about the file will be generated."
    )

class ProcessedFileContent(BaseModel):
    filename: str = Field(..., description="Name of the uploaded file")
    content: str = Field(..., description="Extracted text content from the file")
    file_type: str = Field(..., description="Type of the file (e.g., 'pdf')")
    file_size: int = Field(..., description="Size of the file in bytes")
    page_count: Optional[int] = Field(None, description="Number of pages for PDF files")

class QueryResponse(BaseModel):
    llm_used: str = Field(..., description="The name of the LLM that processed the query.")
    response: str = Field(..., description="The final response generated by the selected LLM.")
    # file_processed: Optional[ProcessedFileContent] = Field(None, description="Information about processed file if any")