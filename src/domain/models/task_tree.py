from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional

class Subtask(BaseModel):
    """Defines a single action within a larger task."""
    subtask_name: str = Field(..., description="A descriptive name for the subtask, e.g., 'Search for Flights'.")
    function: str = Field(..., description="The internal function name to be called, e.g., 'search_flights'.")
    api: str = Field(..., description="The external API being used, e.g., 'Skyscanner API'.")
    payload: Dict[str, Any] = Field(..., description="The data to be sent to the function/API.")
    result: Optional[str] = Field(None, description="The result of this subtask's execution (populated later).")

class TaskTree(BaseModel):
    """Represents the entire plan generated by the Planner Agent for a user query."""
    user_query: str = Field(..., description="The original query from the user.")
    task: str = Field(..., description="The high-level task identified from the query, e.g., 'Flight Booking'.")
    subtasks: List[Subtask] = Field(..., description="A list of sequential subtasks to execute.")
    status: str = Field("pending", description="The current status of the task tree (e.g., pending, in_progress, completed, failed).")
    task_tree_id: Optional[str] = Field(None, description="The unique ID for this task tree stored in Firestore.")